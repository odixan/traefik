networks:
  proxy:
    driver: bridge
    external: true

# secrets:
#   gd_api_token:
#     file: ./config/gd_api_token.txt

services:
  traefik:
    image: traefik:v3.5
    container_name: traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - proxy
    ports:
      - "80:80"
      - "443:443"
      - "8081:8081" # Dashboard - secure it in production
    environment:
      - TRAEFIK_DASHBOARD_CREDENTIALS=${TRAEFIK_DASHBOARD_CREDENTIALS}
    env_file:
      - .env
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/localtime:/etc/localtime:ro
      # Configuration files
      - ./config/traefik.yaml:/etc/traefik/traefik.yaml:ro
      - ./config/dynamic:/etc/traefik/dynamic:ro
      - ./config/certs:/etc/traefik/certs:ro
      - ./config/acme.json:/acme.json
      - ./config/users.txt:/etc/traefik/users.txt:ro
      - ./logs:/var/log/traefik
    labels:
      - "traefik.enable=true"
      # HTTP routes
      - "traefik.http.routers.api.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.api.entrypoints=web"
      - "traefik.http.routers.api.service=api@internal"

      # HTTPS routes for local development (self-signed certs)
      - "traefik.http.routers.api-secure-local.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.api-secure-local.entrypoints=websecure"
      - "traefik.http.routers.api-secure-local.tls=true"
      - "traefik.http.routers.api-secure-local.service=api@internal"
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M


  # Portainer - Container management UI
  portainer:
    image: portainer/portainer-ce:2.34.0-alpine
    container_name: portainer
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - proxy
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - portainer-data:/data
    labels:
      - "traefik.enable=true"
      # HTTP routes
      - "traefik.http.routers.portainer.rule=Host(`portainer.localhost`)"
      - "traefik.http.routers.portainer.entrypoints=web"
      - "traefik.http.routers.portainer.service=portainer"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"

      # HTTPS routes for local development (self-signed certs)
      - "traefik.http.routers.portainer-secure-local.rule=Host(`portainer.localhost`)"
      - "traefik.http.routers.portainer-secure-local.entrypoints=websecure"
      - "traefik.http.routers.portainer-secure-local.tls=true"
      - "traefik.http.routers.portainer-secure-local.service=portainer"
    depends_on:
      traefik:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9000/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

volumes:
  portainer-data:
    driver: local
    name: portainer-data


# Configuration Notes:
#
# Environment Variables:
# - Copy example.env to .env and configure your settings
# - TRAEFIK_DASHBOARD_CREDENTIALS: Basic auth credentials for Traefik dashboard
#
# Security Notes:
# - Traefik dashboard is exposed on HTTP by default (development only)
# - For production, enable HTTPS and basic authentication
# - Portainer runs with read-only Docker socket access
# - Both services run with no-new-privileges security option
#
# Network Configuration:
# - External 'proxy' network must be created before running:
#   docker network create proxy
#
# SSL/TLS Configuration:
# - Uncomment and configure the HTTPS labels for production use
# - Create acme.json file with proper permissions: chmod 600 acme.json
# - Configure your domain names in the Host() rules
#
# Authentication:
# - Create user credentials using htpasswd:
#   echo $(htpasswd -nb user password) | sed -e s/\\$/\\$\\$/g
# - Store in config/users.txt file
#
# Example production setup commands:
# 1. docker network create proxy
# 2. cp example.env .env && edit .env
# 3. mkdir -p config logs
# 4. touch config/acme.json && chmod 600 config/acme.json
# 5. docker-compose up -d
